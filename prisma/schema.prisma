generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id                                       String                  @id @default(uuid())
  username                                 String                  @unique
  email                                    String                  @unique
  passwordHash                             String
  fullName                                 String?
  avatar                                   String?
  student_code                             String?
  profession                               String?
  specialty                                String?
  programming_language                     String?
  gender                                   String?
  phone                                    String?
  personal_Email                           String?
  semester_user                            String?
  isActive                                 Boolean                 @default(true)
  lastLogin                                DateTime?
  createdAt                                DateTime                @default(now())
  updatedAt                                DateTime                @updatedAt
  createdDecisions                         Decision[]              @relation("DecisionCreator")
  documents                                Document[]
  emailLogs                                EmailLog[]
  createdEmailTemplates                    EmailTemplate[]         @relation("UserEmailTemplates")
  groupMemberships                         GroupMember[]           @relation("UserGroupMembers")
  groupmentor_groupmentor_added_byTousers  groupmentor[]           @relation("groupmentor_added_byTousers")
  groupmentor_groupmentor_mentor_idTousers groupmentor[]           @relation("groupmentor_mentor_idTousers")
  createdGroups                            Group[]                 @relation("GroupCreator")
  importLogs                               ImportLog[]
  notificationRecipients                   NotificationRecipient[]
  refreshtoken                             refreshtoken[]
  reviewCouncils                           ReviewCouncil[]         @relation("ReviewCouncilCreator")
  student                                  student?
  systemConfigs                            SystemConfig[]
  systemLogs                               SystemLog[]
  uploadedDocuments                        TopicDocument[]         @relation("UserUploadedDocuments")
  createdSubmissionPeriods                 TopicSubmissionPeriod[] @relation("UserCreatedSubmissionPeriods")
  createdTopics                            Topic[]                 @relation("TopicCreator")
  supervisedTopics                         Topic[]                 @relation("TopicSubSupervisor")
  userrole                                 userrole[]

  @@map("users")
}

model Semester {
  id                    String                  @id @default(uuid())
  code                  String
  startDate             DateTime                @map("start_date")
  endDate               DateTime                @map("end_date")
  status                String
  createdAt             DateTime                @default(now()) @map("created_at")
  yearId                String
  groups                Group[]
  reviewCouncils        ReviewCouncil[]
  reviewDefenseCouncils ReviewDefenseCouncil[]
  semesterTopicMajors   SemesterTopicMajor[]
  year                  year                    @relation("YearSemesters", fields: [yearId], references: [id], onDelete: Cascade)
  semesterstudent       semesterstudent[]
  submissionPeriods     TopicSubmissionPeriod[]
  topics                Topic[]

  @@index([yearId], map: "semesters_yearId_fkey")
  @@map("semesters")
}

model Major {
  id                  String               @id @default(uuid())
  name                String               @unique
  createdAt           DateTime             @default(now()) @map("created_at")
  updatedAt           DateTime             @updatedAt @map("updated_at")
  detailMajorTopics   DetailMajorTopic[]
  semesterTopicMajors SemesterTopicMajor[]
  specializations     Specialization[]
  student             student[]
  topics              Topic[]              @relation("majortopics")

  @@map("majors")
}

model Specialization {
  id        String    @id @default(uuid())
  majorId   String    @map("major_id")
  name      String
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  major     Major     @relation(fields: [majorId], references: [id])
  student   student[]

  @@index([majorId], map: "specializations_major_id_fkey")
  @@map("specializations")
}

model ImportLog {
  id             String   @id @default(uuid())
  source         String
  fileName       String   @map("file_name")
  filePath       String?  @map("file_path")
  importById     String   @map("import_by")
  importAt       DateTime @default(now()) @map("import_at")
  totalRecords   Int      @default(0) @map("total_records")
  successRecords Int      @default(0) @map("success_records")
  errorRecords   Int      @default(0) @map("error_records")
  errorsDetails  String?  @map("errors_details") @db.Text
  importBy       User     @relation(fields: [importById], references: [id])

  @@index([importById], map: "import_logs_import_by_fkey")
  @@map("import_logs")
}

model MeetingSchedule {
  id           String     @id @default(uuid())
  mentorId     String     @map("mentor_id")
  groupId      Int        @map("group_id")
  meetingTime  DateTime   @map("meeting_time")
  location     String
  agenda       String
  status       String
  meetingNotes String?    @map("meeting_notes") @db.Text
  createdAt    DateTime   @default(now()) @map("created_at")
  updatedAt    DateTime   @updatedAt @map("updated_at")
  feedback     Feedback[]

  @@map("meeting_schedules")
}

model TopicRegistration {
  id                 String                @id @default(uuid())
  topicId            String                @map("topic_id")
  submissionPeriodId String                @map("submission_period_id")
  userId             String                @map("user_id")
  reviewerId         String?               @map("reviewer_id")
  role               String
  status             String
  decisionFile       String?               @map("decision_file")
  rejectionReason    String?               @map("rejection_reason") @db.Text
  registeredAt       DateTime              @default(now()) @map("registered_at")
  reviewedAt         DateTime?             @map("reviewed_at")
  submissionPeriod   TopicSubmissionPeriod @relation(fields: [submissionPeriodId], references: [id])
  topic              Topic                 @relation(fields: [topicId], references: [id])

  @@index([submissionPeriodId], map: "topic_registrations_submission_period_id_fkey")
  @@index([topicId], map: "topic_registrations_topic_id_fkey")
  @@map("topic_registrations")
}

model SystemConfig {
  id          String   @id @default(uuid())
  configKey   String   @unique @map("config_key")
  configValue String   @map("config_value")
  description String?
  updatedBy   String   @map("updated_by")
  updatedAt   DateTime @updatedAt @map("updated_at")
  user        User     @relation(fields: [updatedBy], references: [id])

  @@index([updatedBy], map: "system_configs_updated_by_fkey")
  @@map("system_configs")
}

model Council {
  id                    String                @id @default(uuid()) @map("council_id")
  name                  String                @map("council_name")
  topicAssId            String                @map("topicass_id")
  createdDate           DateTime              @default(now()) @map("created_date")
  status                String
  members               CouncilMember[]
  topicAssignment       TopicAssignment       @relation(fields: [topicAssId], references: [id])
  defenseSchedules      DefenseSchedule[]
  reviewAssignments     ReviewAssignment[]
  reviewDefenseCouncils ReviewDefenseCouncil?

  @@index([topicAssId], map: "councils_topicass_id_fkey")
  @@map("councils")
}

model ReviewDefenseCouncil {
  id                 String   @id @default(uuid())
  councilId          String   @unique @map("council_id")
  semesterId         String   @map("semester_id")
  defenseReviewRound String   @map("defense_review_round")
  url                String   @map("URL")
  status             String
  createdBy          String   @map("created_by")
  createdAt          DateTime @default(now()) @map("created_at")
  timeReview         DateTime @map("time_review")
  topicAssignmentId  Int      @map("TopicAssignments_id")
  council            Council  @relation(fields: [councilId], references: [id])
  semester           Semester @relation(fields: [semesterId], references: [id])

  @@index([semesterId], map: "review_defense_councils_semester_id_fkey")
  @@map("review_defense_councils")
}

model Topic {
  id                  String               @id @default(uuid())
  semesterId          String               @map("semester_id")
  topicCode           String               @unique @map("topic_code")
  name                String
  description         String               @db.Text
  isBusiness          Boolean              @default(false) @map("is_business")
  businessPartner     String?              @map("business_partner")
  source              String?
  status              String
  createdBy           String               @map("created_by")
  subSupervisor       String?              @map("sub_supervisor")
  createdAt           DateTime             @default(now()) @map("created_at")
  updatedAt           DateTime             @updatedAt @map("updated_at")
  aiVerificationLogs  AIVerificationLog[]
  decisions           Decision[]
  detailMajorTopics   DetailMajorTopic[]
  documents           Document[]           @relation("TopicDocuments")
  semesterTopicMajors SemesterTopicMajor[]
  topicAssignments    TopicAssignment[]
  topicDocuments      TopicDocument[]      @relation("TopicDocuments")
  topicRegistrations  TopicRegistration[]
  creator             User                 @relation("TopicCreator", fields: [createdBy], references: [id])
  semester            Semester             @relation(fields: [semesterId], references: [id])
  subMentor           User?                @relation("TopicSubSupervisor", fields: [subSupervisor], references: [id])
  majors              Major[]              @relation("majortopics")

  @@index([createdBy], map: "topics_created_by_fkey")
  @@index([semesterId], map: "topics_semester_id_fkey")
  @@index([subSupervisor], map: "topics_sub_supervisor_fkey")
  @@map("topics")
}

model TopicAssignment {
  id              String    @id @default(uuid())
  topicId         String    @map("topic_id")
  groupId         String    @map("group_id")
  decisionId      String?   @map("decision_id")
  decisionFile    String?   @map("decision_file")
  draftFile       String?   @map("draft_file")
  approvalStatus  String    @map("approval_status")
  defendStatus    String    @map("defend_status")
  status          String    @default("ASSIGNED")
  url             String?   @map("URL")
  assignedBy      String    @map("assigned_by")
  reviewCouncilId String?   @map("review_council_id")
  assignedAt      DateTime  @default(now()) @map("assigned_at")
  approvalAt      DateTime? @map("approval_at")
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  councils        Council[]
  group           Group     @relation(fields: [groupId], references: [id])
  topic           Topic     @relation(fields: [topicId], references: [id])

  @@index([groupId], map: "topic_assignments_group_id_fkey")
  @@index([topicId], map: "topic_assignments_topic_id_fkey")
  @@map("topic_assignments")
}

model Group {
  id               String            @id @default(uuid())
  groupCode        String            @unique @map("group_code")
  semesterId       String            @map("semester_id")
  status           String
  isAutoCreated    Boolean           @default(false) @map("is_auto_created")
  createdBy        String            @map("created_by")
  maxMembers       Int               @map("max_members")
  isMultiMajor     Boolean           @default(false) @map("is_multi_major")
  createdAt        DateTime          @default(now()) @map("created_at")
  updatedAt        DateTime          @updatedAt @map("updated_at")
  topicEnglish     String?
  topicTiengViet   String?
  isLocked         Boolean           @default(false)
  decisions        Decision[]
  defenseSchedules DefenseSchedule[]
  members          GroupMember[]
  groupinvitation  groupinvitation[]
  groupmentor      groupmentor[]
  creator          User              @relation("GroupCreator", fields: [createdBy], references: [id])
  semester         Semester          @relation(fields: [semesterId], references: [id])
  progressReports  ProgressReport[]
  topicAssignments TopicAssignment[]

  @@index([createdBy], map: "groups_created_by_fkey")
  @@index([semesterId], map: "groups_semester_id_fkey")
  @@map("groups")
}

model ProgressReport {
  id                   String    @id @default(uuid())
  groupId              String    @map("group_id")
  mentorId             String    @map("mentor_id")
  weekNumber           Int       @map("week_number")
  content              String    @db.Text
  mentorFeedback       String?   @map("mentor_feedback") @db.Text
  completionPercentage Float     @map("completion_percentage")
  status               String
  submittedAt          DateTime  @map("submitted_at")
  reviewedAt           DateTime? @map("reviewed_at")
  url                  String?
  group                Group     @relation(fields: [groupId], references: [id])

  @@index([groupId], map: "progress_reports_group_id_fkey")
  @@map("progress_reports")
}

model AIVerificationLog {
  id              String   @id @default(uuid())
  topicId         String   @map("topic_id")
  verification    String
  originalText    String   @map("original_text") @db.Text
  verifiedText    String   @map("verified_text") @db.Text
  similarityScore Float    @map("similarity_score")
  suggestions     String?  @db.Text
  verifiedBy      String   @map("verified_by")
  verifiedAt      DateTime @map("verified_at")
  topic           Topic    @relation(fields: [topicId], references: [id])

  @@index([topicId], map: "ai_verification_logs_topic_id_fkey")
  @@map("ai_verification_logs")
}

model GroupMember {
  id          String    @id @default(uuid())
  groupId     String    @map("group_id")
  studentId   String?   @map("student_id")
  userId      String?   @map("user_id")
  role        String
  joinedAt    DateTime  @default(now()) @map("joined_at")
  leaveAt     DateTime? @map("leave_at")
  leaveReason String?   @map("leave_reason")
  isActive    Boolean   @default(true) @map("is_active")
  status      String
  group       Group     @relation(fields: [groupId], references: [id])
  student     student?  @relation(fields: [studentId], references: [id])
  user        User?     @relation("UserGroupMembers", fields: [userId], references: [id], onDelete: Cascade)

  @@index([groupId], map: "group_members_group_id_fkey")
  @@index([studentId], map: "group_members_student_id_fkey")
  @@index([userId], map: "group_members_user_id_fkey")
  @@map("group_members")
}

model SystemLog {
  id          String   @id @default(uuid())
  userId      String   @map("user_id")
  action      String
  entityType  String   @map("entity_type")
  entityId    String   @map("entity_id")
  description String?  @map("description")
  error       String?  @map("error")
  stackTrace  String?  @map("stack_trace")
  severity    String   @map("severity")
  metadata    Json?    @map("metadata")
  oldValues   Json?    @map("old_values")
  newValues   Json?    @map("new_values")
  createdAt   DateTime @default(now()) @map("created_at")
  ipAddress   String   @map("ip_address")
  user        User     @relation(fields: [userId], references: [id])

  @@index([userId], map: "system_logs_user_id_fkey")
  @@map("system_logs")
}

model SemesterTopicMajor {
  semesterId String   @map("semester_id")
  topicId    String   @map("topic_id")
  majorId    String   @map("major_id")
  status     String
  major      Major    @relation(fields: [majorId], references: [id])
  semester   Semester @relation(fields: [semesterId], references: [id])
  topic      Topic    @relation(fields: [topicId], references: [id])

  @@id([semesterId, topicId, majorId])
  @@index([majorId], map: "semester_topic_major_major_id_fkey")
  @@index([topicId], map: "semester_topic_major_topic_id_fkey")
  @@map("semester_topic_major")
}

model EmailLog {
  id             String   @id @default(uuid())
  userId         String   @map("user_id")
  recipientEmail String   @map("recipient_email")
  subject        String
  content        String   @db.Text
  status         String
  errorMessage   String?  @map("error_message") @db.Text
  errorAt        DateTime @map("error_at")
  user           User     @relation(fields: [userId], references: [id])

  @@index([userId], map: "email_logs_user_id_fkey")
  @@map("email_logs")
}

model Notification {
  id               String                  @id @default(uuid())
  title            String
  content          String                  @db.Text
  notificationType String                  @map("notification_type")
  createdBy        String                  @map("created_by")
  createdAt        DateTime                @default(now()) @map("created_at")
  isSystem         Boolean                 @default(false) @map("is_system")
  recipients       NotificationRecipient[]

  @@map("notifications")
}

model Decision {
  id             String   @id @default(uuid()) @map("decision_id")
  decisionNumber String   @map("decision_number")
  decisionTitle  String   @map("decision_title")
  groupId        String   @map("group_id")
  topicId        String   @map("topic_id")
  draftFileUrl   String?  @map("draft_file_url")
  finalFileUrl   String?  @map("final_file_url")
  status         String
  createdBy      String   @map("created_by")
  createdAt      DateTime @default(now()) @map("created_at")
  creator        User     @relation("DecisionCreator", fields: [createdBy], references: [id])
  group          Group    @relation(fields: [groupId], references: [id])
  topic          Topic    @relation(fields: [topicId], references: [id])

  @@index([createdBy], map: "decisions_created_by_fkey")
  @@index([groupId], map: "decisions_group_id_fkey")
  @@index([topicId], map: "decisions_topic_id_fkey")
  @@map("decisions")
}

model ReviewCouncil {
  id          String   @id @default(uuid())
  semesterId  String   @map("semester_id")
  reviewType  String   @map("review_type")
  room        String
  councilCode String   @unique @map("council_code")
  startDate   DateTime @map("start_date")
  endDate     DateTime @map("end_date")
  status      String
  url         String   @map("URL")
  createdBy   String   @map("created_by")
  createdAt   DateTime @default(now()) @map("created_at")
  creator     User     @relation("ReviewCouncilCreator", fields: [createdBy], references: [id])
  semester    Semester @relation(fields: [semesterId], references: [id])

  @@index([createdBy], map: "review_councils_created_by_fkey")
  @@index([semesterId], map: "review_councils_semester_id_fkey")
  @@map("review_councils")
}

model ReviewAssignment {
  id               String    @id @default(uuid())
  councilId        String    @map("council_id")
  topicId          String    @map("topic_id")
  reviewerId       String    @map("reviewer_id")
  score            Float?
  feedback         String?   @db.Text
  status           String
  assignedAt       DateTime  @default(now()) @map("assigned_at")
  reviewedAt       DateTime? @map("reviewed_at")
  assignmentStatus String    @map("assignment_status")
  council          Council   @relation(fields: [councilId], references: [id])

  @@index([councilId], map: "review_assignments_council_id_fkey")
  @@map("review_assignments")
}

model Document {
  id           String   @id @default(uuid())
  fileName     String   @map("file_name")
  filePath     String   @map("file_path")
  relatedTable String   @map("related_table")
  documentType String   @map("document_type")
  uploadedAt   DateTime @default(now()) @map("uploaded_at")
  uploadedBy   String   @map("uploaded_by")
  topicId      String?  @map("topic_id")
  topic        Topic?   @relation("TopicDocuments", fields: [topicId], references: [id])
  uploader     User     @relation(fields: [uploadedBy], references: [id])

  @@index([topicId], map: "documents_topic_id_fkey")
  @@index([uploadedBy], map: "documents_uploaded_by_fkey")
  @@map("documents")
}

model CouncilMember {
  id                String   @id @default(uuid())
  councilId         String   @map("council_id")
  defenseCouncilsId String?  @map("defensecouncils_id")
  userId            String   @map("user_id")
  role              String
  assignedAt        DateTime @default(now()) @map("assigned_at")
  status            String
  council           Council  @relation(fields: [councilId], references: [id])

  @@index([councilId], map: "council_members_council_id_fkey")
  @@map("council_members")
}

model Feedback {
  id                 String          @id @default(uuid())
  meetingId          String          @map("meeting_id")
  reviewAssignmentId String?         @map("review_assignment_id")
  content            String          @db.Text
  rating             Int
  createdAt          DateTime        @default(now()) @map("created_at")
  meeting            MeetingSchedule @relation(fields: [meetingId], references: [id])

  @@index([meetingId], map: "feedback_meeting_id_fkey")
  @@map("feedback")
}

model DefenseSchedule {
  id                 String   @id @default(uuid())
  councilId          String   @map("council_id")
  groupId            String   @map("group_id")
  defenseTime        DateTime @map("defense_time")
  location           String
  defenseRound       Int      @map("defense_round")
  status             String
  notes              String?  @db.Text
  createdAt          DateTime @default(now()) @map("created_at")
  confirmationStatus String   @map("confirmation_status")
  council            Council  @relation(fields: [councilId], references: [id])
  group              Group    @relation(fields: [groupId], references: [id])

  @@index([councilId], map: "defense_schedules_council_id_fkey")
  @@index([groupId], map: "defense_schedules_group_id_fkey")
  @@map("defense_schedules")
}

model NotificationRecipient {
  notificationId String       @map("notification_id")
  userId         String       @map("user_id")
  isRead         Boolean      @default(false) @map("is_read")
  readAt         DateTime?    @map("read_at")
  notification   Notification @relation(fields: [notificationId], references: [id])
  user           User         @relation(fields: [userId], references: [id])

  @@id([notificationId, userId])
  @@index([userId], map: "notification_recipients_user_id_fkey")
  @@map("notification_recipients")
}

model DetailMajorTopic {
  majorId String @map("major_id")
  topicId String @map("topic_id")
  status  String
  major   Major  @relation(fields: [majorId], references: [id])
  topic   Topic  @relation(fields: [topicId], references: [id])

  @@id([majorId, topicId])
  @@index([topicId], map: "detail_major_topic_topic_id_fkey")
  @@map("detail_major_topic")
}

model EmailTemplate {
  id            String   @id @default(uuid())
  name          String   @unique
  subject       String
  body          String   @db.Text
  description   String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  createdBy     String
  createdByUser User     @relation("UserEmailTemplates", fields: [createdBy], references: [id])

  @@index([createdBy], map: "email_templates_createdBy_fkey")
  @@map("email_templates")
}

model TopicDocument {
  id          String   @id @default(uuid())
  topicId     String   @map("topic_id")
  documentUrl String   @map("document_url")
  fileName    String   @map("file_name")
  uploadedBy  String   @map("uploaded_by")
  uploadedAt  DateTime @default(now()) @map("uploaded_at")
  topic       Topic    @relation("TopicDocuments", fields: [topicId], references: [id])
  uploader    User     @relation("UserUploadedDocuments", fields: [uploadedBy], references: [id])

  @@index([topicId], map: "topic_documents_topic_id_fkey")
  @@index([uploadedBy], map: "topic_documents_uploaded_by_fkey")
  @@map("topic_documents")
}

model TopicSubmissionPeriod {
  id                 String              @id @default(uuid())
  semesterId         String              @map("semester_id")
  round              Int
  startDate          DateTime            @map("start_date")
  endDate            DateTime            @map("end_date")
  status             String              @default("ACTIVE")
  description        String?             @db.Text
  createdBy          String              @map("created_by")
  createdAt          DateTime            @default(now()) @map("created_at")
  updatedAt          DateTime            @updatedAt @map("updated_at")
  topicRegistrations TopicRegistration[]
  creator            User                @relation("UserCreatedSubmissionPeriods", fields: [createdBy], references: [id])
  semester           Semester            @relation(fields: [semesterId], references: [id])

  @@index([createdBy], map: "topic_submission_periods_created_by_fkey")
  @@index([semesterId], map: "topic_submission_periods_semester_id_fkey")
  @@map("topic_submission_periods")
}

model groupinvitation {
  id          String    @id
  group_id    String
  student_id  String
  status      String    @default("PENDING")
  sentAt      DateTime  @default(now())
  respondedAt DateTime?
  expiresAt   DateTime?
  groups      Group     @relation(fields: [group_id], references: [id], map: "GroupInvitation_group_id_fkey")
  student     student   @relation(fields: [student_id], references: [id], map: "GroupInvitation_student_id_fkey")

  @@index([group_id], map: "GroupInvitation_group_id_fkey")
  @@index([student_id], map: "GroupInvitation_student_id_fkey")
}

model groupmentor {
  id                                 String   @id
  group_id                           String
  mentor_id                          String
  added_by                           String
  added_at                           DateTime @default(now())
  users_groupmentor_added_byTousers  User     @relation("groupmentor_added_byTousers", fields: [added_by], references: [id], map: "GroupMentor_added_by_fkey")
  groups                             Group    @relation(fields: [group_id], references: [id], onDelete: Cascade, map: "GroupMentor_group_id_fkey")
  users_groupmentor_mentor_idTousers User     @relation("groupmentor_mentor_idTousers", fields: [mentor_id], references: [id], map: "GroupMentor_mentor_id_fkey")

  @@unique([group_id, mentor_id], map: "GroupMentor_group_id_mentor_id_key")
  @@index([added_by], map: "GroupMentor_added_by_fkey")
  @@index([mentor_id], map: "GroupMentor_mentor_id_fkey")
}

model refreshtoken {
  id        String   @id
  token     String   @db.Text
  userId    String
  expiresAt DateTime
  createdAt DateTime @default(now())
  users     User     @relation(fields: [userId], references: [id], map: "RefreshToken_userId_fkey")

  @@index([userId], map: "RefreshToken_userId_fkey")
}

model role {
  id          String     @id
  name        String     @unique(map: "Role_name_key")
  description String?
  permissions Json?
  isActive    Boolean    @default(true)
  createdAt   DateTime   @default(now())
  userrole    userrole[]
}

model semesterstudent {
  id                  String   @id
  semester_id         String
  student_id          String
  status              String   @default("active")
  isEligible          Boolean  @default(false)
  qualificationStatus String   @default("not qualified")
  registeredAt        DateTime @default(now())
  semesters           Semester @relation(fields: [semester_id], references: [id], map: "SemesterStudent_semester_id_fkey")
  student             student  @relation(fields: [student_id], references: [id], map: "SemesterStudent_student_id_fkey")

  @@unique([semester_id, student_id], map: "SemesterStudent_semester_id_student_id_key")
  @@index([student_id], map: "SemesterStudent_student_id_fkey")
}

model student {
  id                String            @id
  userId            String?           @unique(map: "Student_userId_key")
  student_code      String            @unique(map: "Student_student_code_key")
  major_id          String
  specialization_id String?
  is_eligible       Boolean           @default(false)
  personal_email    String?
  status            student_status    @default(PENDING)
  import_at         DateTime          @default(now())
  import_source     String
  is_imported       Boolean           @default(true)
  groupMembers      GroupMember[]
  groupinvitation   groupinvitation[]
  semesterstudent   semesterstudent[]
  majors            Major             @relation(fields: [major_id], references: [id], map: "Student_major_id_fkey")
  specializations   Specialization?   @relation(fields: [specialization_id], references: [id], map: "Student_specialization_id_fkey")
  users             User?             @relation(fields: [userId], references: [id], map: "Student_userId_fkey")

  @@index([major_id], map: "Student_major_id_fkey")
  @@index([specialization_id], map: "Student_specialization_id_fkey")
}

model userrole {
  userId     String
  roleId     String
  assignedAt DateTime @default(now())
  isActive   Boolean  @default(true)
  role       role     @relation(fields: [roleId], references: [id], map: "UserRole_roleId_fkey")
  users      User     @relation(fields: [userId], references: [id], map: "UserRole_userId_fkey")

  @@id([userId, roleId])
  @@index([roleId], map: "UserRole_roleId_fkey")
}

model year {
  id        String     @id
  year      Int
  createdAt DateTime   @default(now())
  updatedAt DateTime
  semesters Semester[] @relation("YearSemesters")
}

enum student_status {
  PENDING
  ACTIVE
  INACTIVE
}
