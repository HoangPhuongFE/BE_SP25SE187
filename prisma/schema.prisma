generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id                     String                  @id @default(uuid())
  username               String                  @unique
  email                  String                  @unique
  passwordHash           String
  lecturerCode           String?
  fullName               String?
  departmentPosition     String?
  department             String?
  avatar                 String?
  student_code           String?
  profession             String?
  specialty              String?
  programming_language   String?
  gender                 String?
  phone                  String?
  personal_Email         String?
  semester_user          String?
  isActive               Boolean                 @default(true)
  lastLogin              DateTime?
  createdAt              DateTime                @default(now())
  updatedAt              DateTime                @updatedAt
  refreshTokens          RefreshToken[]
  roles                  UserRole[]
  students               Student[]
  importLogs             ImportLog[]
  systemConfigs          SystemConfig[]
  createdTopics          Topic[]                 @relation("TopicCreator")
  supervisedTopics       Topic[]                 @relation("TopicSubSupervisor")
  createdGroups          Group[]                 @relation("GroupCreator")
  systemLogs             SystemLog[]
  emailLogs              EmailLog[]
  documents              Document[]
  notificationRecipients NotificationRecipient[]
  createdEmailTemplates  EmailTemplate[]         @relation("UserEmailTemplates")
  groupMemberships       GroupMember[]           @relation("UserGroupMembers")
  mentorGroups           GroupMentor[]           @relation(name: "MentorGroupRelation")
  addedMentors           GroupMentor[]           @relation(name: "AddedByUserRelation")
  CouncilMember          CouncilMember[]
  SubmissionPeriod       SubmissionPeriod[]
  progressReportMentors  ProgressReportMentor[]  @relation("MentorProgressReports")
  Decision               Decision[]
  reviewAssignments      ReviewAssignment[]
  isDeleted              Boolean                 @default(false)

  @@map("users")
}

model Role {
  id             String          @id @default(uuid())
  name           String          @unique
  description    String?
  isSystemWide   Boolean         @default(false)
  permissions    Json?
  isActive       Boolean         @default(true)
  createdAt      DateTime        @default(now())
  users          UserRole[]
  groupMentors   GroupMentor[]
  groupMembers   GroupMember[]
  councilMembers CouncilMember[]
  isDeleted      Boolean         @default(false)
}

model UserRole {
  id         String    @id @default(uuid())
  userId     String
  roleId     String
  semesterId String?   @map("semester_id")
  assignedAt DateTime  @default(now())
  isActive   Boolean   @default(true)
  user       User      @relation(fields: [userId], references: [id])
  role       Role      @relation(fields: [roleId], references: [id])
  semester   Semester? @relation(name: "UserRoleToSemester", fields: [semesterId], references: [id])
  isDeleted  Boolean   @default(false)

  @@index([userId, semesterId, roleId])
}

model RefreshToken {
  id        String   @id @default(uuid())
  token     String   @db.Text
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  expiresAt DateTime
  createdAt DateTime @default(now())
  isDeleted Boolean  @default(false)
}

model Student {
  id                   String                @id @default(uuid())
  user                 User?                 @relation(fields: [userId], references: [id])
  userId               String?               @unique
  studentCode          String                @unique @map("student_code")
  major                Major                 @relation(fields: [majorId], references: [id])
  majorId              String                @map("major_id")
  specialization       Specialization?       @relation(fields: [specializationId], references: [id])
  specializationId     String?               @map("specialization_id")
  semesterStudents     SemesterStudent[]
  personalEmail        String?               @map("personal_email")
  status               StudentStatus         @default(ACTIVE)
  importAt             DateTime              @default(now()) @map("import_at")
  importSource         String                @map("import_source")
  isImported           Boolean               @default(true) @map("is_imported")
  invitations          GroupInvitation[]
  groupMembers         GroupMember[]
  defenseMemberResults DefenseMemberResult[] @relation("StudentDefenseResults")
  isDeleted            Boolean               @default(false)
}

model Semester {
  id                  String               @id @default(uuid())
  code                String
  startDate           DateTime             @map("start_date")
  endDate             DateTime             @map("end_date")
  status              String
  createdAt           DateTime             @default(now()) @map("created_at")
  semesterStudents    SemesterStudent[]
  topics              Topic[]
  groups              Group[]
  councils            Council[]
  semesterTopicMajors SemesterTopicMajor[]
  yearId              String
  year                Year                 @relation("YearSemesters", fields: [yearId], references: [id])
  SubmissionPeriod    SubmissionPeriod[]
  userRoles           UserRole[]           @relation(name: "UserRoleToSemester")
  decisions           Decision[]
  isDeleted           Boolean              @default(false)

  @@map("semesters")
}

model Year {
  id        String     @id @default(uuid())
  year      Int
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  semesters Semester[] @relation("YearSemesters")
  isDeleted Boolean    @default(false)
}

model SemesterStudent {
  id                  String   @id @default(uuid())
  semesterId          String   @map("semester_id")
  studentId           String   @map("student_id")
  status              String   @default("PENDING")
  isEligible          Boolean  @default(false)
  qualificationStatus String   @default("not qualified")
  registeredAt        DateTime @default(now())
  semester            Semester @relation(fields: [semesterId], references: [id])
  student             Student  @relation(fields: [studentId], references: [id])
  isDeleted           Boolean  @default(false)

  @@unique([semesterId, studentId])
}

model Major {
  id                  String               @id @default(uuid())
  name                String               @unique
  createdAt           DateTime             @default(now()) @map("created_at")
  updatedAt           DateTime             @updatedAt @map("updated_at")
  students            Student[]
  specializations     Specialization[]
  topics              Topic[]              @relation("MajorTopics")
  semesterTopicMajors SemesterTopicMajor[]
  detailMajorTopics   DetailMajorTopic[]
  isDeleted           Boolean              @default(false)

  @@map("majors")
}

model Specialization {
  id        String    @id @default(uuid())
  major     Major     @relation(fields: [majorId], references: [id])
  majorId   String    @map("major_id")
  name      String
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  students  Student[]
  isDeleted Boolean   @default(false)

  @@map("specializations")
}

model ImportLog {
  id             String   @id @default(uuid())
  source         String
  fileName       String   @map("file_name")
  filePath       String?  @map("file_path")
  importById     String   @map("import_by")
  importBy       User     @relation(fields: [importById], references: [id])
  importAt       DateTime @default(now()) @map("import_at")
  totalRecords   Int      @default(0) @map("total_records")
  successRecords Int      @default(0) @map("success_records")
  errorRecords   Int      @default(0) @map("error_records")
  errorsDetails  String?  @map("errors_details") @db.Text
  isDeleted      Boolean  @default(false)

  @@map("import_logs")
}

enum StudentStatus {
  PENDING
  ACTIVE
  INACTIVE
}

model MeetingSchedule {
  id           String     @id @default(uuid())
  mentorId     String     @map("mentor_id")
  groupId      String     @map("group_id")
  meetingTime  DateTime   @map("meeting_time")
  location     String
  agenda       String
  status       String
  meetingNotes String?    @map("meeting_notes") @db.Text
  url          String?    @map("meeting_url")
  createdAt    DateTime   @default(now()) @map("created_at")
  updatedAt    DateTime   @updatedAt @map("updated_at")
  feedback     Feedback[]
  isDeleted    Boolean    @default(false)

  @@map("meeting_schedules")
}

model TopicRegistration {
  id                 String            @id @default(uuid())
  topicId            String            @map("topic_id")
  submissionPeriodId String            @map("submission_period_id")
  userId             String            @map("user_id")
  reviewerId         String?           @map("reviewer_id")
  role               String
  status             String
  reason             String?
  decisionFile       String?           @map("decision_file")
  rejectionReason    String?           @map("rejection_reason") @db.Text
  registeredAt       DateTime          @default(now()) @map("registered_at")
  reviewedAt         DateTime?         @map("reviewed_at")
  topic              Topic             @relation(fields: [topicId], references: [id])
  SubmissionPeriod   SubmissionPeriod? @relation(fields: [submissionPeriodId], references: [id])
  isDeleted          Boolean           @default(false)

  @@map("topic_registrations")
}

model SystemConfig {
  id          String   @id @default(uuid())
  configKey   String   @unique @map("config_key")
  configValue String   @map("config_value")
  description String?
  updatedBy   String   @map("updated_by")
  updatedAt   DateTime @updatedAt @map("updated_at")
  user        User     @relation(fields: [updatedBy], references: [id])
  isDeleted   Boolean  @default(false)

  @@map("system_configs")
}

model Council {
  id                 String             @id @default(uuid()) @map("council_id")
  code               String?            @unique @map("council_code")
  name               String             @map("council_name")
  topicAssId         String?            @map("topicass_id")
  createdDate        DateTime           @default(now()) @map("created_date")
  status             String?
  type               String?
  round              Int?
  semesterId         String?            @map("semester_id")
  isActive           Boolean            @default(true)
  semester           Semester?          @relation(fields: [semesterId], references: [id])
  topicAssignment    TopicAssignment?   @relation(fields: [topicAssId], references: [id])
  members            CouncilMember[]
  reviewAssignments  ReviewAssignment[]
  defenseSchedules   DefenseSchedule[]
  documents          Document[]         @relation("CouncilDocuments")
  councilStartDate   DateTime?          @map("council_start_date")
  councilEndDate     DateTime?          @map("council_end_date")
  submissionPeriodId String?            @map("submission_period_id")
  submissionPeriod   SubmissionPeriod?  @relation(name: "SubmissionPeriodCouncils", fields: [submissionPeriodId], references: [id])
  sessions           ReviewSchedule[]
  isDeleted          Boolean            @default(false)

  @@map("councils")
}

model Topic {
  id                  String               @id @default(uuid())
  semesterId          String               @map("semester_id")
  submissionPeriodId  String?              @map("submission_period_id")
  topicCode           String               @unique @map("topic_code")
  nameVi              String               @map("name_vi")
  nameEn              String               @map("name_en")
  name                String               @map("name_project")
  description         String               @db.Text
  isBusiness          Boolean              @default(false) @map("is_business")
  businessPartner     String?              @map("business_partner")
  source              String?
  status              String
  createdBy           String               @map("created_by")
  subSupervisor       String?              @map("sub_supervisor")
  mainSupervisor      String?              @map("main_supervisor")
  createdAt           DateTime             @default(now()) @map("created_at")
  updatedAt           DateTime             @updatedAt @map("updated_at")
  reviewReason        String?              @db.Text
  semester            Semester             @relation(fields: [semesterId], references: [id])
  creator             User                 @relation("TopicCreator", fields: [createdBy], references: [id])
  subMentor           User?                @relation("TopicSubSupervisor", fields: [subSupervisor], references: [id])
  proposedGroupId     String?              @map("proposed_group_id")
  group               Group?               @relation("ProposedGroup", fields: [proposedGroupId], references: [id])
  detailMajorTopics   DetailMajorTopic[]
  topicRegistrations  TopicRegistration[]
  topicAssignments    TopicAssignment[]
  majors              Major[]              @relation("MajorTopics")
  aiVerificationLogs  AIVerificationLog[]
  semesterTopicMajors SemesterTopicMajor[]
  documents           Document[]           @relation("TopicDocuments")
  SubmissionPeriod    SubmissionPeriod?    @relation(fields: [submissionPeriodId], references: [id])
  sessions            ReviewSchedule[]
  reviewAssignments   ReviewAssignment[]
  isDeleted           Boolean              @default(false)

  @@map("topics")
}

model TopicAssignment {
  id                 String            @id @default(uuid())
  topicId            String            @map("topic_id")
  groupId            String            @map("group_id")
  status             String            @default("ASSIGNED")
  approvalStatus     String            @map("approval_status")
  defendStatus       String?
  defenseRound       String?
  assignedBy         String            @map("assigned_by")
  assignedAt         DateTime          @default(now()) @map("assigned_at")
  createdAt          DateTime          @default(now())
  updatedAt          DateTime          @updatedAt
  topic              Topic             @relation(fields: [topicId], references: [id])
  group              Group             @relation(fields: [groupId], references: [id])
  councils           Council[]
  isDeleted          Boolean           @default(false)

  @@map("topic_assignments")
}

model Group {
  id               String            @id @default(uuid())
  groupCode        String            @map("group_code")
  semesterId       String            @map("semester_id")
  status           String
  isAutoCreated    Boolean           @default(false) @map("is_auto_created")
  createdBy        String            @map("created_by")
  maxMembers       Int               @map("max_members")
  isMultiMajor     Boolean           @default(false) @map("is_multi_major")
  createdAt        DateTime          @default(now()) @map("created_at")
  updatedAt        DateTime          @updatedAt @map("updated_at")
  semester         Semester          @relation(fields: [semesterId], references: [id])
  creator          User              @relation("GroupCreator", fields: [createdBy], references: [id])
  invitations      GroupInvitation[]
  members          GroupMember[]
  progressReports  ProgressReport[]
  defenseSchedules DefenseSchedule[]
  isLocked         Boolean           @default(false)
  mentors          GroupMentor[]
  topicAssignments TopicAssignment[]
  documents        Document[]        @relation("GroupDocuments")
  proposedTopics   Topic[]           @relation("ProposedGroup")
  reviewSchedules  ReviewSchedule[]
  isDeleted        Boolean           @default(false)

  @@unique([semesterId, groupCode], name: "semesterId_groupCode")
  @@map("groups")
}

model GroupMentor {
  id                   String   @id @default(uuid())
  groupId              String   @map("group_id")
  mentorId             String   @map("mentor_id")
  roleId               String   @map("role_id")
  addedBy              String   @map("added_by")
  addedAt              DateTime @default(now()) @map("added_at")
  defenseRoundDecision String?
  group                Group    @relation(fields: [groupId], references: [id])
  mentor               User     @relation(name: "MentorGroupRelation", fields: [mentorId], references: [id])
  addedByUser          User?    @relation(name: "AddedByUserRelation", fields: [addedBy], references: [id])
  role                 Role     @relation(fields: [roleId], references: [id])
  isDeleted            Boolean  @default(false)

  @@unique([groupId, mentorId])
}

model GroupInvitation {
  id          String    @id @default(uuid())
  groupId     String    @map("group_id")
  studentId   String    @map("student_id")
  status      String    @default("PENDING")
  sentAt      DateTime  @default(now())
  respondedAt DateTime?
  expiresAt   DateTime?
  group       Group     @relation(fields: [groupId], references: [id])
  student     Student   @relation(fields: [studentId], references: [id])
  isDeleted   Boolean   @default(false)
}

model ProgressReportMentor {
  id             String         @id @default(uuid())
  progressReport ProgressReport @relation(fields: [reportId], references: [id])
  reportId       String
  mentor         User           @relation("MentorProgressReports", fields: [mentorId], references: [id])
  mentorId       String
  isRead         Boolean        @default(false)
  readAt         DateTime?
  feedback       String?        @db.Text
  isDeleted      Boolean        @default(false)

  @@unique([reportId, mentorId])
}

model ProgressReport {
  id                   String                 @id @default(uuid())
  groupId              String                 @map("group_id")
  mentorId             String                 @map("mentor_id")
  weekNumber           Int                    @map("week_number")
  content              String                 @db.Text
  mentorFeedback       String?                @map("mentor_feedback") @db.Text
  completionPercentage Float                  @map("completion_percentage")
  status               String
  submittedAt          DateTime               @map("submitted_at")
  reviewedAt           DateTime?              @map("reviewed_at")
  url                  String?
  startDate            DateTime               @map("start_date")
  endDate              DateTime               @map("end_date")
  group                Group                  @relation(fields: [groupId], references: [id])
  mentors              ProgressReportMentor[]
  isDeleted            Boolean                @default(false)

  @@map("progress_reports")
}

model AIVerificationLog {
  id              String   @id @default(uuid())
  topicId         String   @map("topic_id")
  verification    String
  originalText    String   @map("original_text") @db.Text
  verifiedText    String   @map("verified_text") @db.Text
  similarityScore Float    @map("similarity_score")
  suggestions     String?  @db.Text
  verifiedBy      String   @map("verified_by")
  verifiedAt      DateTime @map("verified_at")
  topic           Topic    @relation(fields: [topicId], references: [id])
  isDeleted       Boolean  @default(false)

  @@map("ai_verification_logs")
}

model GroupMember {
  id          String    @id @default(uuid())
  groupId     String    @map("group_id")
  studentId   String?   @map("student_id")
  userId      String?   @map("user_id")
  roleId      String    @map("role_id")
  joinedAt    DateTime  @default(now()) @map("joined_at")
  leaveAt     DateTime? @map("leave_at")
  leaveReason String?   @map("leave_reason")
  isActive    Boolean   @default(true) @map("is_active")
  status      String
  group       Group     @relation(fields: [groupId], references: [id])
  student     Student?  @relation(fields: [studentId], references: [id])
  user        User?     @relation(fields: [userId], references: [id], name: "UserGroupMembers")
  role        Role      @relation(fields: [roleId], references: [id])
  isDeleted   Boolean   @default(false)

  @@map("group_members")
}

model SystemLog {
  id          String   @id @default(uuid())
  userId      String   @map("user_id")
  action      String
  entityType  String   @map("entity_type")
  entityId    String   @map("entity_id")
  description String?  @map("description")
  error       String?  @map("error") @db.Text
  stackTrace  String?  @map("stack_trace") @db.Text
  severity    String   @map("severity")
  metadata    Json?    @map("metadata")
  oldValues   Json?    @map("old_values")
  newValues   Json?    @map("new_values")
  createdAt   DateTime @default(now()) @map("created_at")
  ipAddress   String   @map("ip_address")
  user        User     @relation(fields: [userId], references: [id])
  isDeleted   Boolean  @default(false)

  @@map("system_logs")
}

model SemesterTopicMajor {
  semesterId String   @map("semester_id")
  topicId    String   @map("topic_id")
  majorId    String   @map("major_id")
  status     String
  topic      Topic    @relation(fields: [topicId], references: [id])
  semester   Semester @relation(fields: [semesterId], references: [id])
  major      Major    @relation(fields: [majorId], references: [id])
  isDeleted  Boolean  @default(false)

  @@id([semesterId, topicId, majorId])
  @@map("semester_topic_major")
}

model EmailLog {
  id             String   @id @default(uuid())
  userId         String   @map("user_id")
  recipientEmail String   @map("recipient_email")
  subject        String
  content        String   @db.Text
  status         String
  errorMessage   String?  @map("error_message") @db.Text
  errorAt        DateTime @map("error_at")
  user           User     @relation(fields: [userId], references: [id])
  metadata        Json?
  isDeleted      Boolean  @default(false)

  @@map("email_logs")
}

model Notification {
  id               String                  @id @default(uuid())
  title            String
  content          String                  @db.Text
  notificationType String                  @map("notification_type")
  createdBy        String                  @map("created_by")
  createdAt        DateTime                @default(now()) @map("created_at")
  isSystem         Boolean                 @default(false) @map("is_system")
  recipients       NotificationRecipient[]
  isDeleted        Boolean                 @default(false)

  @@map("notifications")
}

model Decision {
  id            String    @id @default(uuid())
  decisionName  String    @map("decision_name")
  decisionTitle String?   @map("decision_title")
  draftFile     String?   @map("draft_file")
  finalFile     String?   @map("final_file")
  decisionURL   String?   @map("decisionURL")
  status        String
  semesterId    String?
  semester      Semester? @relation(fields: [semesterId], references: [id])
  createdBy     String    @map("created_by")
  createdAt     DateTime  @default(now()) @map("created_at")
  creator       User      @relation(fields: [createdBy], references: [id])
  isDeleted     Boolean   @default(false)

  @@map("decisions")
}

model ReviewSchedule {
  id          String             @id @default(uuid())
  councilId   String             @map("council_id")
  groupId     String             @map("group_id")
  reviewTime  DateTime           @map("review_time")
  room        String
  reviewRound Int
  note        String?
  status      String             @default("PENDING")
  council     Council            @relation(fields: [councilId], references: [id])
  group       Group              @relation(fields: [groupId], references: [id])
  topicId     String
  topic       Topic              @relation(fields: [topicId], references: [id])
  assignments ReviewAssignment[] @relation("ReviewScheduleAssignments")
  documents   Document[]         @relation("ReviewScheduleDocuments")
  isDeleted   Boolean            @default(false)

  @@map("review_schedules")
}

model ReviewAssignment {
  id               String         @id @default(uuid())
  councilId        String         @map("council_id")
  topicId          String         @map("topic_id")
  reviewerId       String?        @map("reviewer_id")
  score            Float?
  feedback         String?        @db.Text
  status           String         @default("PENDING")
  reviewRound      Int
  assignedAt       DateTime       @default(now()) @map("assigned_at")
  reviewedAt       DateTime?      @map("reviewed_at")
  reviewScheduleId String         @map("review_schedule_id")
  council          Council        @relation(fields: [councilId], references: [id])
  topic            Topic          @relation(fields: [topicId], references: [id])
  reviewer         User?          @relation(fields: [reviewerId], references: [id])
  reviewSchedule   ReviewSchedule @relation("ReviewScheduleAssignments", fields: [reviewScheduleId], references: [id])
  isDeleted        Boolean        @default(false)

  @@map("review_assignment")
}

model Document {
  id                String           @id @default(uuid())
  fileName          String           @map("file_name")
  fileUrl           String           @map("file_url")
  fileType          String           @map("file_type")
  uploadedAt        DateTime         @default(now()) @map("uploaded_at")
  uploadedBy        String           @map("uploaded_by")
  description       String?
  documentType      String?
  topicId           String?          @map("topic_id")
  councilId         String?          @map("council_id")
  groupId           String?          @map("group_id")
  reviewScheduleId  String?          @map("review_schedule_id")
  defenseScheduleId String?          @map("defense_schedule_id")
  uploader          User             @relation(fields: [uploadedBy], references: [id])
  topic             Topic?           @relation("TopicDocuments", fields: [topicId], references: [id])
  council           Council?         @relation("CouncilDocuments", fields: [councilId], references: [id])
  group             Group?           @relation("GroupDocuments", fields: [groupId], references: [id])
  reviewSchedule    ReviewSchedule?  @relation("ReviewScheduleDocuments", fields: [reviewScheduleId], references: [id])
  defenseSchedule   DefenseSchedule? @relation("DefenseScheduleDocuments", fields: [defenseScheduleId], references: [id]) // Đồng bộ tên quan hệ
  isDeleted         Boolean          @default(false)

  @@map("documents")
}

model CouncilMember {
  id         String   @id @default(uuid())
  councilId  String   @map("council_id")
  roleId     String   @map("role_id")
  assignedAt DateTime @default(now()) @map("assigned_at")
  status     String
  council    Council  @relation(fields: [councilId], references: [id])
  userId     String   @map("user_id")
  semesterId String   @map("semester_id")
  user       User     @relation(fields: [userId], references: [id])
  role       Role     @relation(fields: [roleId], references: [id])
  isDeleted  Boolean  @default(false)

  @@map("council_members")
}

model Feedback {
  id                 String          @id @default(uuid())
  meetingId          String          @map("meeting_id")
  reviewAssignmentId String?         @map("review_assignment_id")
  content            String          @db.Text
  rating             Int
  createdAt          DateTime        @default(now()) @map("created_at")
  meeting            MeetingSchedule @relation(fields: [meetingId], references: [id])
  isDeleted          Boolean         @default(false)

  @@map("feedback")
}

enum CouncilType {
  TOPIC
  REVIEW
  DEFENSE
}

model DefenseSchedule {
  id            String                @id @default(uuid())
  councilId     String                @map("council_id")
  groupId       String                @map("group_id")
  defenseTime   DateTime              @map("defense_time")
  room          String
  defenseRound  Int                   @map("defense_round")
  status        String
  notes         String?               @db.Text
  result        String?
  feedback      String?
  createdAt     DateTime              @default(now()) @map("created_at")
  council       Council               @relation(fields: [councilId], references: [id])
  group         Group                 @relation(fields: [groupId], references: [id])
  documents     Document[]            @relation("DefenseScheduleDocuments")
  memberResults DefenseMemberResult[] @relation("DefenseMemberResults") // Quan hệ với DefenseMemberResult
  isDeleted     Boolean               @default(false)

  @@map("defense_schedules")
}

model DefenseMemberResult {
  id                String          @id @default(uuid())
  defenseScheduleId String          @map("defense_schedule_id")
  studentId         String          @map("student_id")
  result            String // "PASS" hoặc "NOT_PASS"
  feedback          String?         @db.Text
  evaluatedBy       String?         @map("evaluated_by") // Người đánh giá (tùy chọn)
  evaluatedAt       DateTime?       @map("evaluated_at") // Thời gian đánh giá (tùy chọn)
  defenseSchedule   DefenseSchedule @relation("DefenseMemberResults", fields: [defenseScheduleId], references: [id]) // Đồng bộ tên quan hệ
  student           Student         @relation("StudentDefenseResults", fields: [studentId], references: [id])
  isDeleted         Boolean         @default(false)
  @@unique([defenseScheduleId, studentId]) 
}

model NotificationRecipient {
  notificationId String       @map("notification_id")
  userId         String       @map("user_id")
  isRead         Boolean      @default(false) @map("is_read")
  readAt         DateTime?    @map("read_at")
  notification   Notification @relation(fields: [notificationId], references: [id])
  user           User         @relation(fields: [userId], references: [id])
  isDeleted      Boolean      @default(false)

  @@id([notificationId, userId])
  @@map("notification_recipients")
}

model DetailMajorTopic {
  majorId   String  @map("major_id")
  topicId   String  @map("topic_id")
  status    String
  major     Major   @relation(fields: [majorId], references: [id])
  topic     Topic   @relation(fields: [topicId], references: [id])
  isDeleted Boolean @default(false)

  @@id([majorId, topicId])
  @@map("detail_major_topic")
}

model EmailTemplate {
  id            String   @id @default(uuid())
  name          String   @unique
  subject       String
  body          String   @db.Text
  description   String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  createdBy     String
  createdByUser User     @relation("UserEmailTemplates", fields: [createdBy], references: [id])
  isDeleted     Boolean  @default(false)

  @@map("email_templates")
}

model SubmissionPeriod {
  id                 String              @id @default(uuid())
  semesterId         String              @map("semester_id")
  roundNumber        Int                 @map("round_number")
  type               String               // TOPIC CHECK_TOPIC REVIEW  DEFENSE
  startDate          DateTime            @map("start_date")
  endDate            DateTime            @map("end_date")
  createdBy          String              @map("created_by")
  createdAt          DateTime            @default(now()) @map("created_at")
  updatedAt          DateTime            @updatedAt @map("updated_at")
  description        String              @map("description")
  status             String              @default("PENDING") @map("status")
  semester           Semester            @relation(fields: [semesterId], references: [id])
  creator            User                @relation(fields: [createdBy], references: [id])
  topics             Topic[]
  councils           Council[]           @relation("SubmissionPeriodCouncils")
  topicRegistrations TopicRegistration[]
  isDeleted          Boolean             @default(false)

  @@map("submission_periods")
}
