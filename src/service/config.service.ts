import { PrismaClient } from "@prisma/client";

const prisma = new PrismaClient();

export class ConfigService {
    // üîπ Gi√° tr·ªã c·∫•u h√¨nh m·∫∑c ƒë·ªãnh n·∫øu DB ch∆∞a c√≥
    private static readonly DEFAULT_CONFIG: Record<string, string> = {
        CHANGE_LEADER_DEADLINE_DAYS: "7",  // S·ªë ng√†y cho ph√©p ƒë·ªïi leader
        MAX_GROUP_MEMBERS: "5",  // S·ªë th√†nh vi√™n t·ªëi ƒëa trong nh√≥m
        MAX_GROUP_MENTORS: "2",  // S·ªë mentor t·ªëi ƒëa trong nh√≥m
    };

    // üîπ L·∫•y gi√° tr·ªã c·∫•u h√¨nh t·ª´ DB ho·∫∑c tr·∫£ v·ªÅ m·∫∑c ƒë·ªãnh
    static async getConfigValue(key: string): Promise<string> {
        const config = await prisma.systemConfig.findUnique({
            where: { configKey: key }
        });

        return config ? config.configValue : (this.DEFAULT_CONFIG[key] || "");
    }

    // üîπ L·∫•y to√†n b·ªô danh s√°ch c·∫•u h√¨nh (k·∫øt h·ª£p gi√° tr·ªã m·∫∑c ƒë·ªãnh n·∫øu DB ch∆∞a c√≥)
    static async getAllConfigs() {
        const configs = await prisma.systemConfig.findMany();
        const configMap = Object.fromEntries(configs.map(cfg => [cfg.configKey, cfg.configValue]));

        return { ...this.DEFAULT_CONFIG, ...configMap };
    }

    // üîπ C·∫≠p nh·∫≠t gi√° tr·ªã c·∫•u h√¨nh (ch·ªâ Admin)
    static async updateConfig(key: string, value: string, adminId: string) {
        const user = await prisma.user.findUnique({
            where: { id: adminId },
            include: { roles: true }
        });

        const isAdmin = user?.roles.some(role => role.roleId === "admin");
        if (!isAdmin) throw new Error("B·∫°n kh√¥ng c√≥ quy·ªÅn c·∫≠p nh·∫≠t c·∫•u h√¨nh.");

        await prisma.systemConfig.upsert({
            where: { configKey: key },
            update: { configValue: value },
            create: {
                configKey: key,
                configValue: value,
                description: `C·∫•u h√¨nh h·ªá th·ªëng cho ${key}`,
                user: { connect: { id: adminId } }
            }
        });

        return { message: `C·∫≠p nh·∫≠t ${key} th√†nh ${value}.` };
    }

    // üîπ Tr·∫£ v·ªÅ s·ªë ng√†y t·ªëi ƒëa cho ph√©p ƒë·ªïi leader
    static async getLeaderChangeDeadline(): Promise<number> {
        const value = await this.getConfigValue("CHANGE_LEADER_DEADLINE_DAYS");
        return Number(value) || 7; // M·∫∑c ƒë·ªãnh 7 ng√†y
    }

    // üîπ Tr·∫£ v·ªÅ s·ªë mentor t·ªëi ƒëa trong m·ªôt nh√≥m
    static async getMaxMentorsPerGroup(): Promise<number> {
        const value = await this.getConfigValue("MAX_GROUP_MENTORS");
        return Number(value) || 2; // M·∫∑c ƒë·ªãnh 2 mentor
    }

    // L·∫•y t·∫•t c·∫£ c·∫•u h√¨nh r·ªìi l·ªçc ra c√°c key ƒë∆∞·ª£c y√™u c·∫ßu
    static async getFilteredConfigs(keys: string[]): Promise<Record<string, string>> {
        const allConfigs = await this.getAllConfigs();
        const filteredConfigs: Record<string, string> = {};

        keys.forEach(key => {
            if (allConfigs[key] !== undefined) {
                filteredConfigs[key] = allConfigs[key];
            }
        });

        return filteredConfigs;
    }

}
