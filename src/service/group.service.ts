import { PrismaClient } from "@prisma/client";
import { sendEmail } from "../utils/email";
import { MESSAGES } from "../constants/message";
const prisma = new PrismaClient();

export class GroupService {
  [x: string]: any;

  async createGroup(leaderId: string, semesterId: string) {
    const leader = await prisma.student.findUnique({ where: { userId: leaderId } });
    if (!leader) throw new Error(MESSAGES.STUDENT.STUDENT_NOT_FOUND);

    // T·∫°o nh√≥m m·ªõi
    const newGroup = await prisma.group.create({
      data: {
        groupCode: `G-${Date.now()}`,
        semesterId,
        status: "ACTIVE",
        createdBy: leaderId,
        maxMembers: 5,
        isAutoCreated: false,
        members: {
          create: [{
            studentId: leader.id,
            role: "LEADER",
            status: "ACTIVE"
          }],
        },
      },
      include: { members: true },
    });

    return { message: MESSAGES.GROUP.GROUP_CREATED, data: newGroup };
  }


  async inviteMember(groupId: string, studentId: string, invitedById: string) {
    // üîç Ki·ªÉm tra nh√≥m c√≥ t·ªìn t·∫°i kh√¥ng
    const group = await prisma.group.findUnique({
      where: { id: groupId },
      include: {
        members: {
          include: { student: { include: { major: true } } }
        }
      }, //  L·∫•y th√¥ng tin ng√†nh c·ªßa th√†nh vi√™n trong nh√≥m
    });

    if (!group) throw new Error(MESSAGES.GROUP.GROUP_NOT_FOUND);
    if (group.members.length >= 5) throw new Error(MESSAGES.GROUP.GROUP_FULL);
    if (group.members.some((m) => m.studentId === studentId)) {
      throw new Error(MESSAGES.GROUP.MEMBER_ALREADY_EXISTS);
    }

    //  L·∫•y th√¥ng tin sinh vi√™n c·∫ßn m·ªùi (g·ªìm ng√†nh h·ªçc)
    const student = await prisma.student.findUnique({
      where: { id: studentId },
      include: { user: true, major: true },
    });

    if (!student) throw new Error("Kh√¥ng t√¨m th·∫•y sinh vi√™n.");

    //  Ki·ªÉm tra ƒëi·ªÅu ki·ªán c·ªßa sinh vi√™n trong h·ªçc k·ª≥
    const studentSemester = await prisma.semesterStudent.findFirst({
      where: { studentId: studentId, semesterId: group.semesterId }
    });

    if (!studentSemester || studentSemester.qualificationStatus !== "qualified") {
      throw new Error("Sinh vi√™n kh√¥ng ƒë·ªß ƒëi·ªÅu ki·ªán tham gia nh√≥m.");
    }

    //  Ki·ªÉm tra ng√†nh h·ªçc n·∫øu nh√≥m ƒë√£ c√≥ th√†nh vi√™n
    if (group.members.length > 0) {
      const groupMajor = group.members[0].student.major?.id; // ‚úÖ S·ª≠ d·ª•ng Optional Chaining
      if (student.major?.id !== groupMajor) {
        throw new Error(`Sinh vi√™n thu·ªôc ng√†nh kh√°c (${student.major?.name}), kh√¥ng th·ªÉ tham gia nh√≥m.`);
      }
    }
    //  Ki·ªÉm tra n·∫øu ƒë√£ c√≥ l·ªùi m·ªùi tr∆∞·ªõc ƒë√≥
    const existingInvitation = await prisma.groupInvitation.findFirst({
      where: { groupId, studentId, status: "PENDING" },
    });

    if (existingInvitation) throw new Error(MESSAGES.GROUP.INVITATION_EXISTS);

    //  T·∫°o l·ªùi m·ªùi m·ªõi
    const invitation = await prisma.groupInvitation.create({
      data: { groupId, studentId, status: "PENDING" },
    });

    //  G·ª≠i email m·ªùi sinh vi√™n
    if (student?.user?.email) {
      const invitationLink = `http://160.187.241.152:6969/api/groups/accept-invitation/${invitation.id}`;

      const emailContent = `
        <p>Xin ch√†o ${student.user.fullName || student.user.username},</p>
        <p>B·∫°n ƒë√£ ƒë∆∞·ª£c m·ªùi tham gia nh√≥m ${group.groupCode}. Click v√†o ƒë∆∞·ªùng link b√™n d∆∞·ªõi ƒë·ªÉ ch·∫•p nh·∫≠n l·ªùi m·ªùi:</p>
        <a href="${invitationLink}">Ch·∫•p nh·∫≠n l·ªùi m·ªùi</a>
        `;

      try {
        await sendEmail({
          to: student.user.email,
          subject: "L·ªùi m·ªùi tham gia nh√≥m",
          html: emailContent,
        });

        await prisma.emailLog.create({
          data: {
            userId: invitedById,
            recipientEmail: student.user.email,
            subject: "L·ªùi m·ªùi tham gia nh√≥m",
            content: emailContent,
            status: "SENT",
            errorAt: new Date(),
          },
        });

      } catch (error) {
        await prisma.emailLog.create({
          data: {
            userId: invitedById,
            recipientEmail: student.user.email,
            subject: "L·ªùi m·ªùi tham gia nh√≥m",
            content: emailContent,
            status: "FAILED",
            errorMessage: (error as Error).message,
            errorAt: new Date(),
          },
        });

        console.error(` L·ªói g·ª≠i email cho ${student.user.email}:`, error);
      }
    }

    return { message: MESSAGES.GROUP.INVITATION_SENT, data: invitation };
  }

  async respondToInvitation(invitationId: string, userId: string, response: "ACCEPTED" | "REJECTED") {
    // L·∫•y studentId t·ª´ userId
    const student = await prisma.student.findUnique({
      where: { userId: userId },
      select: { id: true } // L·∫•y ID c·ªßa student
    });

    if (!student) {
      throw new Error(MESSAGES.USER.UNAUTHORIZED);
    }

    // Ki·ªÉm tra l·ªùi m·ªùi
    const invitation = await prisma.groupInvitation.findUnique({
      where: { id: invitationId },
      include: { group: true },
    });

    if (!invitation) throw new Error(MESSAGES.GROUP.INVITATION_NOT_FOUND);
    if (invitation.studentId !== student.id) throw new Error(MESSAGES.USER.UNAUTHORIZED);

    // C·∫≠p nh·∫≠t tr·∫°ng th√°i l·ªùi m·ªùi
    const updatedInvitation = await prisma.groupInvitation.update({
      where: { id: invitationId },
      data: { status: response, respondedAt: new Date() },
    });

    // N·∫øu ch·∫•p nh·∫≠n l·ªùi m·ªùi, th√™m v√†o nh√≥m
    if (response === "ACCEPTED") {
      await prisma.groupMember.create({
        data: {
          groupId: invitation.groupId,
          studentId: student.id,
          role: "MEMBER",
          status: "ACTIVE",
        },
      });

      return { message: MESSAGES.GROUP.INVITATION_ACCEPTED, data: updatedInvitation };
    }

    return { message: MESSAGES.GROUP.INVITATION_REJECTED, data: updatedInvitation };
  }

  async getGroupInfo(groupId: string) {
    const group = await prisma.group.findUnique({
      where: { id: groupId },
      include: {
        members: {
          include: {
            student: {
              include: {
                user: true,
              },
            },
          },
        },
      },
    });
    return group;
  }

  async getInvitationById(invitationId: string) {
    return await prisma.groupInvitation.findUnique({
      where: { id: invitationId },
    });
  }

  async forceAcceptInvitation(invitationId: string, studentId: string, p0: string) {
    // Ki·ªÉm tra l·ªùi m·ªùi c√≥ t·ªìn t·∫°i kh√¥ng
    const invitation = await prisma.groupInvitation.findUnique({
      where: { id: invitationId },
      include: { group: true },
    });

    if (!invitation) throw new Error("L·ªùi m·ªùi kh√¥ng t·ªìn t·∫°i.");
    if (invitation.status !== "PENDING") throw new Error("L·ªùi m·ªùi ƒë√£ ƒë∆∞·ª£c x·ª≠ l√Ω ho·∫∑c h·∫øt h·∫°n.");

    // Ch·∫•p nh·∫≠n l·ªùi m·ªùi m√† kh√¥ng c·∫ßn x√°c th·ª±c `userId`
    await prisma.groupInvitation.update({
      where: { id: invitationId },
      data: { status: "ACCEPTED", respondedAt: new Date() },
    });

    // Th√™m sinh vi√™n v√†o nh√≥m
    await prisma.groupMember.create({
      data: {
        groupId: invitation.groupId,
        studentId: invitation.studentId,
        role: "MEMBER",
        status: "ACTIVE",
      },
    });

    return { message: "L·ªùi m·ªùi ƒë√£ ƒë∆∞·ª£c ch·∫•p nh·∫≠n." };
  }

  async getGroupsBySemester(semesterId: string, userId: string) {
    // L·∫•y th√¥ng tin user + roles
    const user = await prisma.user.findUnique({
        where: { id: userId },
        include: { roles: { include: { role: true } } } 
    });

    if (!user) throw new Error("Ng∆∞·ªùi d√πng kh√¥ng t·ªìn t·∫°i.");

    // L·∫•y danh s√°ch role c·ªßa user
    const userRoles = user.roles.map(r => r.role.name.toLowerCase());

    // N·∫øu user c√≥ quy·ªÅn admin ‚Üí Xem t·∫•t c·∫£ nh√≥m
    if (userRoles.includes("graduation_thesis_manager") || userRoles.includes("admin")) {
        return await prisma.group.findMany({
            where: { semesterId },
            include: {
                members: {
                    include: { student: { include: { user: true } } }
                }
            }
        });
    }

    // N·∫øu user l√† sinh vi√™n ‚Üí Ch·ªâ xem nh√≥m c·ªßa h·ªç
    if (userRoles.includes("student")) {
        const student = await prisma.student.findUnique({
            where: { userId },
            select: { id: true }
        });

        if (!student) throw new Error("Kh√¥ng t√¨m th·∫•y sinh vi√™n.");

        return await prisma.group.findMany({
            where: {
                semesterId,
                members: { some: { studentId: student.id } }
            },
            include: {
                members: {
                    include: { student: { include: { user: true } } }
                }
            }
        });
    }

    // N·∫øu user l√† gi·∫£ng vi√™n ho·∫∑c mentor ‚Üí Xem nh√≥m do h·ªç h∆∞·ªõng d·∫´n
    if (userRoles.includes("lecturer") || userRoles.includes("mentor")) {
        return await prisma.group.findMany({
            where: {
                semesterId,
                OR: [
                    { mentor1Id: userId },
                    { mentor2Id: userId }
                ]
            },
            include: {
                members: {
                    include: { student: { include: { user: true } } }
                }
            }
        });
    }

    throw new Error("B·∫°n kh√¥ng c√≥ quy·ªÅn truy c·∫≠p danh s√°ch nh√≥m.");
}

 
async getStudentsWithoutGroup(semesterId: string) {
  const studentsWithoutGroup = await prisma.student.findMany({
      where: {
          semesterStudents: {
              some: { semesterId }
          },
          groupMembers: { none: {} } 
      },
      include: {
          user: true, 
          major: true,
          specialization: true,
      }
  });

  return studentsWithoutGroup;
}


async randomizeGroups(semesterId: string, createdBy: string) {
  // L·∫•y danh s√°ch sinh vi√™n ƒë·ªß ƒëi·ªÅu ki·ªán, ch∆∞a c√≥ nh√≥m
  const students = await prisma.student.findMany({
      where: {
          semesterStudents: {
              some: { semesterId, qualificationStatus: "qualified" },
          },
          groupMembers: { none: {} }, // Kh√¥ng c√≥ nh√≥m
      },
      include: { user: true, major: true, specialization: true },
  });

  if (students.length === 0) {
      throw new Error("Kh√¥ng c√≥ sinh vi√™n n√†o ƒë·ªß ƒëi·ªÅu ki·ªán ƒë·ªÉ t·∫°o nh√≥m.");
  }

  //  Ph√¢n lo·∫°i theo chuy√™n m√¥n (FE, BE, FS)
  let feStudents = students.filter(s => s.specialization?.name === "Frontend");
  let beStudents = students.filter(s => s.specialization?.name === "Backend");
  let fsStudents = students.filter(s => s.specialization?.name === "Fullstack");

  let groups: any[] = [];
  let groupCounter = 1;

  while (students.length > 0) {
      let groupMembers = [];

      //  C·ªë g·∫Øng l·∫•y 2 FE, 2 BE, n·∫øu c√≥ th·ªÉ th√™m 1 FS
      if (feStudents.length > 0) groupMembers.push(feStudents.pop());
      if (beStudents.length > 0) groupMembers.push(beStudents.pop());
      if (feStudents.length > 0) groupMembers.push(feStudents.pop());
      if (beStudents.length > 0) groupMembers.push(beStudents.pop());
      if (fsStudents.length > 0 && groupMembers.length < 5) groupMembers.push(fsStudents.pop());

      //  N·∫øu nh√≥m ch∆∞a ƒë·ªß 4, l·∫•y ng·∫´u nhi√™n t·ª´ sinh vi√™n c√≤n l·∫°i
      while (groupMembers.length < 4 && students.length > 0) {
          groupMembers.push(students.pop());
      }

      //  N·∫øu nh√≥m ch∆∞a ƒë·∫°t t·ªëi thi·ªÉu 4 th√†nh vi√™n, b·ªè qua nh√≥m n√†y
      if (groupMembers.length < 4) break;

  
      const newGroup = await prisma.group.create({
          data: {
              groupCode: `G-${groupCounter++}-${Date.now()}`,
              semesterId,
              status: "ACTIVE",
              createdBy,
              maxMembers: 5,
              isAutoCreated: true,
              members: {
                  create: groupMembers.map((member, index) => ({
                      studentId: member!.id,
                      role: index === 0 ? "leader" : "member",
                      status: "ACTIVE",
                  })),
              },
          },
          include: { members: true },
      });

      groups.push(newGroup);
  }

  return { message: "Random nh√≥m th√†nh c√¥ng!", data: groups };
}

}
