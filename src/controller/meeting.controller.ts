import { Response } from "express";
import { AuthenticatedRequest } from "../middleware/user.middleware";
import { MeetingService } from "../service/meeting.service";
import HTTP_STATUS from "../constants/httpStatus";
import { MEETING_MESSAGE } from "../constants/message";
import { PrismaClient } from "@prisma/client";

const prisma = new PrismaClient();

export class MeetingController {
  private meetingService = new MeetingService();

  /**
   * üìå T·∫°o meeting m·ªõi
   */
  async createMeeting(req: AuthenticatedRequest, res: Response) {
    try {
      const mentorId = req.user!.userId;
      const { groupId, meetingTime, location, agenda, url } = req.body;

      //  Ki·ªÉm tra mentor c√≥ thu·ªôc nh√≥m kh√¥ng
      const isMentor = await prisma.groupMentor.findFirst({
        where: {
          groupId,
          mentorId,
        },
      });

      if (!isMentor) {
        return res.status(HTTP_STATUS.FORBIDDEN).json({
          message: MEETING_MESSAGE.UNAUTHORIZED_MENTOR,
        });
      }

      //  T·∫°o meeting
      const meeting = await this.meetingService.createMeeting({
        mentorId,
        groupId,
        meetingTime,
        location,
        agenda,
        url,
      });

      // L·∫•y th√¥ng tin chi ti·∫øt c·ªßa meeting v·ª´a t·∫°o
      const meetingDetail = await this.meetingService.getMeetingById(meeting.id);

      res.status(HTTP_STATUS.CREATED).json({
        message: MEETING_MESSAGE.MEETING_CREATED,
        data: meetingDetail,
      });
    } catch (error) {
      console.error("Error creating meeting:", error);
      res.status(HTTP_STATUS.BAD_REQUEST).json({
        message: (error as Error).message,
      });
    }
  }

  /**
   * üìå C·∫≠p nh·∫≠t meeting
   */
  async updateMeeting(req: AuthenticatedRequest, res: Response) {
    try {
      const { id } = req.params;
      const mentorId = req.user!.userId;
      const updateData = req.body;

      //  C·∫≠p nh·∫≠t meeting
      const updatedMeeting = await this.meetingService.updateMeeting(id, mentorId, updateData);

      // L·∫•y th√¥ng tin chi ti·∫øt c·ªßa meeting sau khi c·∫≠p nh·∫≠t
      const meetingDetail = await this.meetingService.getMeetingById(updatedMeeting.id);

      res.status(HTTP_STATUS.OK).json({
        message: MEETING_MESSAGE.MEETING_UPDATED,
        data: meetingDetail,
      });
    } catch (error) {
      console.error("Error updating meeting:", error);
      res.status(HTTP_STATUS.BAD_REQUEST).json({
        message: (error as Error).message,
      });
    }
  }

  /**
   *  X√≥a meeting
   */
  async deleteMeeting(req: AuthenticatedRequest, res: Response) {
    try {
      const { id } = req.params;
      const mentorId = req.user!.userId;
      const ipAddress = req.ip; // L·∫•y ƒë·ªãa ch·ªâ IP t·ª´ request
  
      if (!id) {
        return res.status(HTTP_STATUS.BAD_REQUEST).json({
          message: 'Thi·∫øu ID cu·ªôc h·ªçp.',
        });
      }
  
      const result = await this.meetingService.deleteMeeting(id, mentorId, ipAddress);
      res.status(HTTP_STATUS.OK).json(result);
    } catch (error) {
      console.error('Error marking meeting as deleted:', error);
      res.status(HTTP_STATUS.BAD_REQUEST).json({
        message: error instanceof Error ? error.message : 'L·ªói khi ƒë√°nh d·∫•u x√≥a cu·ªôc h·ªçp.',
      });
    }
  }

  /**
   *  L·∫•y danh s√°ch meetings theo groupId
   */
  async getMeetingsByGroup(req: AuthenticatedRequest, res: Response) {
    try {
      const { groupId } = req.params;

      // Ki·ªÉm tra xem groupId l√† id hay code
      let group;
      
      // N·∫øu l√† UUID th√¨ t√¨m theo id, n·∫øu kh√¥ng th√¨ t√¨m theo code
      const isUUID = /^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/i.test(groupId);
      
      if (isUUID) {
        group = await prisma.group.findUnique({
          where: { id: groupId },
        });
      } else {
        // T√¨m h·ªçc k·ª≥ hi·ªán t·∫°i n·∫øu kh√¥ng c√≥ semesterId
        const currentSemester = await prisma.semester.findFirst({
          where: { status: 'ACTIVE' },
          orderBy: { startDate: 'desc' },
        });

        if (!currentSemester) {
          return res.status(HTTP_STATUS.NOT_FOUND).json({
            message: "Kh√¥ng t√¨m th·∫•y h·ªçc k·ª≥ hi·ªán t·∫°i"
          });
        }

        // T√¨m group theo groupCode v√† semesterId
        group = await prisma.group.findFirst({
          where: { 
            groupCode: groupId,
            semesterId: currentSemester.id
          },
        });
      }

      if (!group) {
        return res.status(HTTP_STATUS.NOT_FOUND).json({
          message: MEETING_MESSAGE.GROUP_NOT_FOUND,
        });
      }

      //  L·∫•y danh s√°ch meetings
      const meetings = await this.meetingService.getMeetingsByGroup(group.id);

      res.status(HTTP_STATUS.OK).json({
        data: meetings,
      });
    } catch (error) {
      console.error("Error getting meetings by group:", error);
      res.status(HTTP_STATUS.BAD_REQUEST).json({
        message: (error as Error).message,
      });
    }
  }

  /**
   *  L·∫•y th√¥ng tin chi ti·∫øt c·ªßa m·ªôt meeting
   */
  async getMeetingById(req: AuthenticatedRequest, res: Response) {
    try {
      const { id } = req.params;

      //  L·∫•y th√¥ng tin chi ti·∫øt meeting
      const meeting = await this.meetingService.getMeetingById(id);

      res.status(HTTP_STATUS.OK).json({
        data: meeting,
      });
    } catch (error) {
      console.error("Error getting meeting by id:", error);
      res.status(HTTP_STATUS.BAD_REQUEST).json({
        message: (error as Error).message,
      });
    }
  }

  /**
   * L·∫•y t·∫•t c·∫£ meeting c·ªßa m·ªôt lecturer (c·∫£ mentor ch√≠nh v√† mentor ph·ª•)
   */
  async getMeetingsByMentor(req: AuthenticatedRequest, res: Response) {
    try {
      const mentorId = req.user!.userId;
      
      // L·∫•y semesterId t·ª´ query ho·∫∑c t·ª´ role c·ªßa ng∆∞·ªùi d√πng n·∫øu kh√¥ng c√≥ trong query
      let semesterId = req.query.semesterId as string;
      
      // N·∫øu kh√¥ng c√≥ semesterId trong query, l·∫•y h·ªçc k·ª≥ hi·ªán t·∫°i
      if (!semesterId) {
        const currentSemester = await prisma.semester.findFirst({
          where: { status: 'ACTIVE' },
          orderBy: { startDate: 'desc' }
        });
        
        if (currentSemester) {
          semesterId = currentSemester.id;
        }
      }

      // L·∫•y danh s√°ch meeting
      const meetings = await this.meetingService.getMeetingsByMentor(
        mentorId, 
        semesterId
      );

      res.status(HTTP_STATUS.OK).json({
        data: meetings,
      });
    } catch (error) {
      console.error("Error getting meetings by mentor:", error);
      res.status(HTTP_STATUS.BAD_REQUEST).json({
        message: (error as Error).message,
      });
    }
  }

  /**
   * L·∫•y meetings c·ªßa lecturer v·ªõi vai tr√≤ mentor ch√≠nh
   */
  async getMainMentorMeetings(req: AuthenticatedRequest, res: Response) {
    try {
      const mentorId = req.user!.userId;
      
      // L·∫•y semesterId t·ª´ query ho·∫∑c t·ª´ role c·ªßa ng∆∞·ªùi d√πng n·∫øu kh√¥ng c√≥ trong query
      let semesterId = req.query.semesterId as string;
      
      // N·∫øu kh√¥ng c√≥ semesterId trong query, l·∫•y h·ªçc k·ª≥ hi·ªán t·∫°i
      if (!semesterId) {
        const currentSemester = await prisma.semester.findFirst({
          where: { status: 'ACTIVE' },
          orderBy: { startDate: 'desc' }
        });
        
        if (currentSemester) {
          semesterId = currentSemester.id;
        }
      }

      // L·∫•y danh s√°ch c√°c nh√≥m m√† lecturer l√† mentor ch√≠nh
      const mentorGroups = await prisma.groupMentor.findMany({
        where: {
          mentorId,
          group: semesterId ? {
            semesterId: semesterId
          } : undefined,
          role: {
            name: 'mentor_main'
          }
        },
        select: {
          groupId: true
        }
      });

      if (mentorGroups.length === 0) {
        return res.status(HTTP_STATUS.OK).json({
          data: [],
        });
      }

      // L·∫•y danh s√°ch groupId
      const groupIds = mentorGroups.map(group => group.groupId);

      // L·∫•y t·∫•t c·∫£ meeting c·ªßa c√°c nh√≥m n√†y
      const meetings = await prisma.meetingSchedule.findMany({
        where: {
          groupId: {
            in: groupIds
          }
        },
        orderBy: {
          meetingTime: 'desc'
        }
      });

      // L·∫•y th√¥ng tin chi ti·∫øt cho m·ªói meeting
      const meetingsWithDetails = await Promise.all(
        meetings.map(async (meeting) => {
          // L·∫•y th√¥ng tin mentor ch√≠nh
          const mainMentor = await prisma.user.findUnique({
            where: { id: meeting.mentorId },
            select: {
              id: true,
              fullName: true,
              email: true,
              avatar: true
            }
          });

          // L·∫•y th√¥ng tin nh√≥m
          const group = await prisma.group.findUnique({
            where: { id: meeting.groupId },
            select: {
              id: true,
              groupCode: true,
              semesterId: true
            }
          });

          return {
            ...meeting,
            group,
            mentor: mainMentor,
            isMentorMain: meeting.mentorId === mentorId,
            role: 'main'
          };
        })
      );

      res.status(HTTP_STATUS.OK).json({
        data: meetingsWithDetails,
      });
    } catch (error) {
      console.error("Error getting main mentor meetings:", error);
      res.status(HTTP_STATUS.BAD_REQUEST).json({
        message: (error as Error).message,
      });
    }
  }

  /**
   * L·∫•y meetings c·ªßa lecturer v·ªõi vai tr√≤ mentor ph·ª•
   */
  async getSubMentorMeetings(req: AuthenticatedRequest, res: Response) {
    try {
      const mentorId = req.user!.userId;
      
      // L·∫•y semesterId t·ª´ query ho·∫∑c t·ª´ role c·ªßa ng∆∞·ªùi d√πng n·∫øu kh√¥ng c√≥ trong query
      let semesterId = req.query.semesterId as string;
      
      // N·∫øu kh√¥ng c√≥ semesterId trong query, l·∫•y h·ªçc k·ª≥ hi·ªán t·∫°i
      if (!semesterId) {
        const currentSemester = await prisma.semester.findFirst({
          where: { status: 'ACTIVE' },
          orderBy: { startDate: 'desc' }
        });
        
        if (currentSemester) {
          semesterId = currentSemester.id;
        }
      }

      // L·∫•y danh s√°ch c√°c nh√≥m m√† lecturer l√† mentor ph·ª•
      const mentorGroups = await prisma.groupMentor.findMany({
        where: {
          mentorId,
          group: semesterId ? {
            semesterId: semesterId
          } : undefined,
          role: {
            name: 'mentor_sub'
          }
        },
        select: {
          groupId: true
        }
      });

      if (mentorGroups.length === 0) {
        return res.status(HTTP_STATUS.OK).json({
          data: [],
        });
      }

      // L·∫•y danh s√°ch groupId
      const groupIds = mentorGroups.map(group => group.groupId);

      // L·∫•y t·∫•t c·∫£ meeting c·ªßa c√°c nh√≥m n√†y
      const meetings = await prisma.meetingSchedule.findMany({
        where: {
          groupId: {
            in: groupIds
          }
        },
        orderBy: {
          meetingTime: 'desc'
        }
      });

      // L·∫•y th√¥ng tin chi ti·∫øt cho m·ªói meeting
      const meetingsWithDetails = await Promise.all(
        meetings.map(async (meeting) => {
          // L·∫•y th√¥ng tin mentor ch√≠nh
          const mainMentor = await prisma.user.findUnique({
            where: { id: meeting.mentorId },
            select: {
              id: true,
              fullName: true,
              email: true,
              avatar: true
            }
          });

          // L·∫•y th√¥ng tin nh√≥m
          const group = await prisma.group.findUnique({
            where: { id: meeting.groupId },
            select: {
              id: true,
              groupCode: true,
              semesterId: true
            }
          });

          return {
            ...meeting,
            group,
            mentor: mainMentor,
            isMentorMain: false,
            role: 'sub'
          };
        })
      );

      res.status(HTTP_STATUS.OK).json({
        data: meetingsWithDetails,
      });
    } catch (error) {
      console.error("Error getting sub mentor meetings:", error);
      res.status(HTTP_STATUS.BAD_REQUEST).json({
        message: (error as Error).message,
      });
    }
  }
}